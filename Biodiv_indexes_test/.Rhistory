corr_phy_ITS2_shann
# Manually calculating
phy.ranked.shann <- data.frame(cbind(rank(data_phylum_ITS2$`ECe _values`, ties.method = "average"), rank(data_phylum_ITS2$SHANNON, ties.method = "average")))
colnames(phy.ranked.shann) <- c("ECe_values", "SHANNON")
rho <- cov(phy.ranked.shann) / (sd(phy.ranked.shann$ECe_values) * sd(phy.ranked.shann$SHANNON))
rho[[2]]
corr_phy_ITS2_shann$estimate
corr_phy_ITS2_shann$statistic
corr_phy_ITS2_shann$p.value
# Spearman correlation for SIMPSON
corr_phy_ITS2_sim <- cor.test(x=data_phylum_ITS2$`ECe _values`, y=data_phylum_ITS2$SIMPSON, method = "spearman")
#Cannot compute exact p-value with ties
corr_phy_ITS2_sim
# Manually calculating
phy.ranked.sim <- data.frame(cbind(rank(data_phylum_ITS2$`ECe _values`, ties.method = "average"), rank(data_phylum_ITS2$SIMPSON, ties.method = "average")))
colnames(phy.ranked.sim) <- c("ECe_values", "SIMPSON")
rho <- cov(phy.ranked.sim) / (sd(phy.ranked.sim$ECe_values) * sd(phy.ranked.sim$SIMPSON))
rho[[2]]
corr_phy_ITS2_sim$estimate
corr_phy_ITS2_sim$statistic
corr_phy_ITS2_sim$p.value
#### Only for bulk samples ####
bi_phylum_ITS2_B <- merge(shannon_phylum_ITS2, simpson_phylum_ITS2, by = "Samples") %>% slice(1:19)
# Export the merged table in excel and .csv
write.xlsx(bi_phylum_ITS2_B,"bi_phylum_ITS2_B.xlsx")
write.csv(bi_phylum_ITS2_B, file = "bi_phylum_ITS2_B.csv", row.names = TRUE)
# Preparation of data for Spearman correlation
#S1 table for bulk samples
S1_table_ITS2_B <- S1_table %>% slice(1:19)
#Merge bi and S1 tables
data_phylum_ITS2_B <- merge(bi_phylum_ITS2_B, S1_table_ITS2_B, by = "Samples")
# Spearman correlation for SHANNON
corr_phy_ITS2_shann_B <- cor.test(x=data_phylum_ITS2_B$`ECe _values`, y=data_phylum_ITS2_B$SHANNON, method = "spearman")
#Cannot compute exact p-value with ties
corr_phy_ITS2_shann_B
# Manually calculating
phy.ranked.shann_B <- data.frame(cbind(rank(data_phylum_ITS2_B$`ECe _values`, ties.method = "average"), rank(data_phylum_ITS2_B$SHANNON, ties.method = "average")))
colnames(phy.ranked.shann_B) <- c("ECe_values", "SHANNON")
rho <- cov(phy.ranked.shann_B) / (sd(phy.ranked.shann_B$ECe_values) * sd(phy.ranked.shann_B$SHANNON))
rho[[2]]
corr_phy_ITS2_shann_B$estimate
corr_phy_ITS2_shann_B$statistic
corr_phy_ITS2_shann_B$p.value
# Spearman correlation for SIMPSON
corr_phy_ITS2_sim_B <- cor.test(x=data_phylum_ITS2_B$`ECe _values`, y=data_phylum_ITS2_B$SIMPSON, method = "spearman")
#Cannot compute exact p-value with ties
corr_phy_ITS2_sim_B
# Manually calculating
phy.ranked.sim_B <- data.frame(cbind(rank(data_phylum_ITS2_B$`ECe _values`, ties.method = "average"), rank(data_phylum_ITS2_B$SIMPSON, ties.method = "average")))
colnames(phy.ranked.sim_B) <- c("ECe_values", "SIMPSON")
rho <- cov(phy.ranked.sim_B) / (sd(phy.ranked.sim_B$ECe_values) * sd(phy.ranked.sim_B$SIMPSON))
rho[[2]]
corr_phy_ITS2_sim_B$estimate
corr_phy_ITS2_sim_B$statistic
corr_phy_ITS2_sim_B$p.value
#### Only for rhizospheric samples ####
bi_phylum_ITS2_R <- merge(shannon_phylum_ITS2, simpson_phylum_ITS2, by = "Samples") %>% slice(20:42)
View(bi_phylum_ITS2_R)
# Export the merged table in excel and .csv
write.xlsx(bi_phylum_ITS2_R,"bi_phylum_ITS2_R.xlsx")
write.csv(bi_phylum_ITS2_R, file = "bi_phylum_ITS2_R.csv", row.names = TRUE)
# Preparation of data for Spearman correlation
#S1 table for rhizosphere samples
S1_table_ITS2_R <- S1_table %>% slice(20:42)
#Merge bi and S1 tables
data_phylum_ITS2_R <- merge(bi_phylum_ITS2_R, S1_table_ITS2_R, by = "Samples")
View(data_phylum_ITS2_R)
# Spearman correlation for SHANNON
corr_phy_ITS2_shann_R <- cor.test(x=data_phylum_ITS2_R$`ECe _values`, y=data_phylum_ITS2_R$SHANNON, method = "spearman")
#Cannot compute exact p-value with ties
corr_phy_ITS2_shann_R
# Manually calculating
phy.ranked.shann_R <- data.frame(cbind(rank(data_phylum_ITS2_R$`ECe _values`, ties.method = "average"), rank(data_phylum_ITS2_R$SHANNON, ties.method = "average")))
colnames(phy.ranked.shann_R) <- c("ECe_values", "SHANNON")
rho <- cov(phy.ranked.shann_R) / (sd(phy.ranked.shann_R$ECe_values) * sd(phy.ranked.shann_R$SHANNON))
rho[[2]]
corr_phy_ITS2_shann_R$estimate
corr_phy_ITS2_shann_R$statistic
corr_phy_ITS2_shann_R$p.value
# Spearman correlation for SIMPSON
corr_phy_ITS2_sim_R <- cor.test(x=data_phylum_ITS2_R$`ECe _values`, y=data_phylum_ITS2_R$SIMPSON, method = "spearman")
#Cannot compute exact p-value with ties
corr_phy_ITS2_sim_R
# Manually calculating
phy.ranked.sim_R <- data.frame(cbind(rank(data_phylum_ITS2_R$`ECe _values`, ties.method = "average"), rank(data_phylum_ITS2_R$SIMPSON, ties.method = "average")))
colnames(phy.ranked.sim_R) <- c("ECe_values", "SIMPSON")
rho <- cov(phy.ranked.sim_R) / (sd(phy.ranked.sim_R$ECe_values) * sd(phy.ranked.sim_R$SIMPSON))
rho[[2]]
corr_phy_ITS2_sim_R$estimate
corr_phy_ITS2_sim_R$statistic
corr_phy_ITS2_sim_R$p.value
### Kruskal-Wallis test ###
# Phylum ITS2 SHANNON in bulk samples
kruskal.test(ECe_values~SHANNON, data = phy.ranked.shann_B)
# Phylum ITS2 SIMPSON in bulk samples
kruskal.test(ECe_values~SIMPSON, data = phy.ranked.sim_B)
# Phylum ITS2 SHANNON in rhizospheric samples
kruskal.test(ECe_values~SHANNON, data = phy.ranked.shann_R)
# Phylum ITS2 SIMPSON in rhizospheric samples
kruskal.test(ECe_values~SIMPSON, data = phy.ranked.sim_R)
total_phylum <- rbind(shannon_phylum_ITS2, simpson_phylum_ITS2, chao_phylum_ITS2)
t_total_phylum <- data.frame(t(total_phylum))
View(t_total_phylum)
total_phylum <- rbind(shannon_phylum_ITS2, simpson_phylum_ITS2, chao_phylum_ITS2)
t_total_phylum <- data.frame(t(total_phylum))
View(t_total_phylum)
total_phylum <- rbind(shannon_phylum_ITS2, simpson_phylum_ITS2, chao_phylum_ITS2)
t_total_phylum <- data.frame(t(total_phylum))
View(t_total_phylum)
total_phylum <- rbind(shannon_phylum_ITS2, simpson_phylum_ITS2, chao_phylum_ITS2)
t_total_phylum <- data.frame(t(total_phylum))
View(t_total_phylum)
total_phylum <- rbind(shannon_phylum_ITS2, simpson_phylum_ITS2, chao_phylum_ITS2)
t_total_phylum <- data.frame(t(total_phylum))
total_phylum <- rbind(shannon_phylum_ITS2, simpson_phylum_ITS2, chao_phylum_ITS2)
#Import the rarefied table for 16S
otu <- read.xlsx("ITS2_rarefied_table.xlsx")
otu <- mutate(otu, Taxonomy = paste(otu$Kingdom, otu$Phylum, otu$Class, otu$Order, otu$Family, otu$Gender, otu$Species, sep =";")) %>%
select(-Kingdom, -Phylum, -Class, -Order, -Family, -Gender, -Species)
otu <- otu %>% select(Taxonomy, everything())
#Transpose the table
t_otu <- data.frame(t(otu[-1]))
colnames(t_otu) <- otu$Taxonomy
t_otu <- rownames_to_column(t_otu, "Samples")
# Shannon for OTU of ITS2
shannon_otu_ITS2 <- ddply(t_otu,~Samples,function(x) {
data.frame(SHANNON=diversity(x[-1], index = "shannon"))
})
# Simpson for OTU of ITS2
simpson_otu_ITS2 <- ddply(t_otu,~Samples,function(x) {
data.frame(SIMPSON=diversity(x[-1], index = "simpson"))
})
# Chao1 for OTU of ITS2
chao_otu_ITS2 <- ddply(t_otu,~Samples,function(x) {
data.frame(chao1 =chao1(x[-1], taxa.row = FALSE))
})
# ACE for OTU of ITS2
ACE_otu_ITS2 <- ddply(t_otu,~Samples,function(x) {
data.frame(ACE = ACE(x[-1], taxa.row = FALSE))
})
# Merge biodiversity indexes
bi_otu_ITS2 <- merge(shannon_otu_, simpson_otu_ITS2,  by = "Samples")
bi_otu_ITS2 <- merge(shannon_otu_ITS2, simpson_otu_ITS2,  by = "Samples")
bi_otu_ITS2 <- merge(bi_otu_ITS2,chao_otu_ITS2, by = "Samples")
bi_otu_ITS2 <- merge(bi_otu_ITS2,ACE_otu_ITS2, by = "Samples")
View(bi_otu_ITS2)
bi_otu_ITS2 <- merge(shannon_otu_ITS2, simpson_otu_ITS2,  by = "Samples")
bi_otu_ITS2 <- merge(bi_otu_ITS2,chao_otu_ITS2, by = "Samples")
bi_otu_ITS2 <- merge(bi_otu_ITS2,ACE_otu_ITS2, by = "Samples")
write.xlsx(bi_otu_ITS2,"bi_otu_16S.xlsx")
write.xlsx(bi_otu_ITS2,"bi_otu_ITS2.xlsx")
write.csv(bi_otu_ITS2, file = "bi_otu_ITS2.csv", row.names = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(dplyr)
library(openxlsx)
install.packages("expss")
library(expss)
library(readxl)
(taxa_assignment_table <- read_excel("taxa_assignment_table.xlsx"))
setwd("~/D3/JRL/microbiome_soil/sequences_processing/16S/16S_results")
(tot_read_PCR <- select(taxa_assignment_table, PCRCont) %>%
colSums())
library(readxl)
(taxa_assignment_table <- read_excel("taxa_assignment_table.xlsx"))
setwd("~/D3/JRL/microbiome_soil/sequences_processing/16S/16S_results")
setwd("~/D3/JRL/microbiome_soil/sequences_processing/16S/16S_export_output_jrl2020")
library(readxl)
(taxa_assignment_table <- read_excel("taxa_assignment_table.xlsx"))
taxa_assignment_table.xlsx
library(readxl)
(taxa_assignment_table <- read_excel("taxa_assignment_table.xlsx"))
View(taxa_assignment_table)
library(readxl)
(taxa_assignment_table <- read_excel("taxa_assignment_table.xlsx"))
View(taxa_assignment_table)
(tot_read_PCR <- select(taxa_assignment_table, PCRCont) %>%
colSums())
(taxa_assignment_table %>% filter(PCRCont !=0) %>%
mutate(pct_cont_OTU_PCR = (PCRCont/tot_read_PCR)*100))
(tot_read_ExtCont <- select(taxa_assignment_table, ExtCont) %>%
colSums())
(taxa_assignment_table %>% filter(ExtCont !=0) %>%
mutate(ext_cont_OTU_PCR = (ExtCont/tot_read_PCR)*100))
(tot_read_MockCom <- select(taxa_assignment_table, MockCom) %>%
colSums())
(taxa_assignment_table %>% filter(MockCom !=0) %>%
mutate(mock_com_OTU_PCR = (MockCom/tot_read_PCR)*100))
#First, we select the columns we want to work with : all the samples (grep function) and PCRCont (which function)
assignment_table_comp <- taxa_assignment_table[,c
(which(colnames(taxa_assignment_table)=="PCRCont"),
grep("[\\-]", colnames(taxa_assignment_table)))]
#We create a vector containing the name of the columns for the percentage of contamination. So the vector is 47 length
varnames <- paste(colnames(assignment_table_comp)[-1], "pct","cont", sep = "_")
#We calculate ther percentage, i.e. PCRCont reads divided by the reads in one sample for one contaminated OTU
calculated_pct <- ( assignment_table_comp$PCRCont / assignment_table_comp[,2:length(assignment_table_comp)]  ) * 100
#We rename the columns of the data frame 'calculated_pct' with the names we put in varnames
names(calculated_pct) <- varnames
#The result is a data frame with the name of the contaminatde OTU and the percentage of contamination for each sample
(res <- cbind(taxa_assignment_table[,c(1:7,
which(colnames(taxa_assignment_table)=="PCRCont" ))],
calculated_pct) %>%
filter(PCRCont !=0)
)
#First, we select the columns we want to work with : all the samples (grep function) and ExtCont (which function)
assignment_table_comp <- taxa_assignment_table[,c
(which(colnames(taxa_assignment_table)=="ExtCont"),
grep("[\\-]", colnames(taxa_assignment_table)))]
#We create a vector containing the name of the columns for the percentage of contamination. So the vector is 47 length
varnames <- paste(colnames(assignment_table_comp)[-1], "ext","cont", sep = "_")
#We calculate ther percentage, i.e. ExtCont reads divided by the reads in one sample for one contaminated OTU
calculated_pct <- ( assignment_table_comp$ExtCont / assignment_table_comp[,2:length(assignment_table_comp)]  ) * 100
#We rename the columns of the data frame 'calculated_pct' with the names we put in varnames
names(calculated_pct) <- varnames
#The result is a data frame with the name of the contaminatde OTU and the percentage of contamination for each sample
(res <- cbind(taxa_assignment_table[,c(1:7,
which(colnames(taxa_assignment_table)=="ExtCont" ))],
calculated_pct) %>%
filter(ExtCont !=0)
)
#First, we select the columns we want to work with : all the samples (grep function) and MockComt (which function)
assignment_table_comp <- taxa_assignment_table[,c
(which(colnames(taxa_assignment_table)=="MockCom"),
grep("[\\-]", colnames(taxa_assignment_table)))]
#We create a vector containing the name of the columns for the percentage of contamination. So the vector is 47 length
varnames <- paste(colnames(assignment_table_comp)[-1], "mock","com", sep = "_")
#We calculate ther percentage, i.e. PCRCont reads divided by the reads in one sample for one contaminated OTU
calculated_pct <- ( assignment_table_comp$MockCom / assignment_table_comp[,2:length(assignment_table_comp)]  ) * 100
#We rename the columns of the data frame 'calculated_pct' with the names we put in varnames
names(calculated_pct) <- varnames
#The result is a data frame with the name of the contaminatde OTU and the percentage of contamination for each sample
(res <- cbind(taxa_assignment_table[,c(1:7,
which(colnames(taxa_assignment_table)=="MockCom" ))],
calculated_pct) %>%
filter(MockCom !=0)
)
# The same for the otu
(nb_hundred_otu <-
cbind(data.frame(colnames(t_res)),
data.frame(count_col_if(function(x) x>=100, t_res))) %>%
rename("OTU" = 1, "Count" = 2)%>%
arrange(desc(Count))
)
#First, we select the columns we want to work with : all the samples (grep function) and MockComt (which function)
assignment_table_comp <- taxa_assignment_table[,c
(which(colnames(taxa_assignment_table)=="MockCom"),
grep("[\\-]", colnames(taxa_assignment_table)))]
#We create a vector containing the name of the columns for the percentage of contamination. So the vector is 47 length
varnames <- paste(colnames(assignment_table_comp)[-1], "mock","com", sep = "_")
#We calculate ther percentage, i.e. PCRCont reads divided by the reads in one sample for one contaminated OTU
calculated_pct <- ( assignment_table_comp$MockCom / assignment_table_comp[,2:length(assignment_table_comp)]  ) * 100
#We rename the columns of the data frame 'calculated_pct' with the names we put in varnames
names(calculated_pct) <- varnames
#The result is a data frame with the name of the contaminatde OTU and the percentage of contamination for each sample
(res <- cbind(taxa_assignment_table[,c(1:7,
which(colnames(taxa_assignment_table)=="MockCom" ))],
calculated_pct) %>%
filter(MockCom !=0)
)
# Change the Inf in NA
res <- na_if(res, Inf)
#Transpose the matrix so that we can easily play with the numbers
(t_res <- data.frame(t(res[-c(1:7)])))
list_colnames <- list()
for (i in c(1:dim(res)[1])) {
list_colnames[i] <- paste(res[i,1], res[i,2], res[i,3], res[i,4], res[i,5], res[i,6], res[i,7], sep ="_")
}
colnames(t_res) <- list_colnames
# Show the number of times samples have a contamination percentage higher than 100 %
(nb_hundred_samples <-
cbind(data.frame(rownames(t_res)),
data.frame(count_row_if(function(x) x>=100, t_res))) %>%
rename("Samples" = 1, "Count" = 2) %>%
arrange(desc(Count))
)
setwd("~/D3/JRL/microbiome_soil/sequences_processing/ITS2/ITS2 results")
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(dplyr)
library(openxlsx)
library(expss)
(assignment_table <- read.xlsx("ITS2_assignment_table.xlsx"))
(tot_read_PCR <- select(assignment_table, PCRCont) %>%
colSums())
(assignment_table %>% filter(PCRCont !=0) %>%
mutate(pct_cont_OTU_PCR = (PCRCont/tot_read_PCR)*100))
#First, we select the columns we want to work with : all the samples (grep function) and PCRCont (which function)
assignment_table_comp <- assignment_table[,c(which(colnames(assignment_table)=="PCRCont"),
grep("[\\-]", colnames(assignment_table)))]
#We create a vector containing the name of the columns for the percentage of contamination. So the vector is 47 length
varnames <- paste(colnames(assignment_table_comp)[-1], "pct","cont", sep = "_")
#We calculate ther percentage, i.e. PCRCont reads divided by the reads in one sample for one contaminated OTU
calculated_pct <- ( assignment_table_comp$PCRCont / assignment_table_comp[,2:length(assignment_table_comp)]  ) * 100
#We rename the columns of the data frame 'calculated_pct' with the names we put in varnames
names(calculated_pct) <- varnames
#The result is a data frame with the name of the contaminatde OTU and the percentage of contamination for each sample
(res <- cbind(assignment_table[,c(1:7,
which(colnames(assignment_table)=="PCRCont" ))],
calculated_pct) %>%
filter(PCRCont !=0)
)
?read_excel
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
df <- read_excel("Table 1.xlsx", sheet = "OTU")
setwd("~/D3/JRL/microbiome_soil/Biodiv_indexes_test")
df <- read_excel("Table 1.xlsx", sheet = "OTU")
View(df)
colnames(df) <- gsub(" ", "_", colnames(df))
colnames(df) <- gsub("'s ", "", colnames(df))
df <- filter(df, !is.na(OTU_number_(richness)))
colnames(df) <- gsub("( ", "_", colnames(df))
colnames(df) <- gsub("\\( ", "", colnames(df))
colnames(df) <- gsub("([\\( ])", "", colnames(df))
colnames(df) <- gsub("([\\) ])", "", colnames(df))
df <- filter(df, !is.na(OTU_number_richness))
df <- filter(df, !is.na(OTU_number_richness, sample_group == "a*"))
df <- filter(df, !is.na(OTU_number_richness), sample_group == "a*"))
df <- filter(df, !is.na(OTU_number_richness), sample_group == "a*")
df <- read_excel("Table 1.xlsx", sheet = "OTU")
colnames(df) <- gsub(" ", "_", colnames(df))
colnames(df) <- gsub("([\\( ])", "", colnames(df))
colnames(df) <- gsub("([\\) ])", "", colnames(df))
df <- filter(df, !is.na(OTU_number_richness), sample_group !== "a*")
df <- read_excel("Table 1.xlsx", sheet = "OTU")
colnames(df) <- gsub(" ", "_", colnames(df))
colnames(df) <- gsub("([\\( ])", "", colnames(df))
colnames(df) <- gsub("([\\) ])", "", colnames(df))
df <- filter(df, !is.na(OTU_number_richness), sample_group != "a*")
df <- read_excel("Table 1.xlsx", sheet = "OTU")
colnames(df) <- gsub(" ", "_", colnames(df))
colnames(df) <- gsub("([\\( ])", "", colnames(df))
colnames(df) <- gsub("([\\) ])", "", colnames(df))
df <- filter(df, !is.na(OTU_number_richness), sample_group != "a.")
df <- filter(df, !is.na(OTU_number_richness), sample_group != "all bulk soils", sample_group != "all rhizospheric soil")
df <- read_excel("Table 1.xlsx", sheet = "OTU")
colnames(df) <- gsub(" ", "_", colnames(df))
colnames(df) <- gsub("([\\( ])", "", colnames(df))
colnames(df) <- gsub("([\\) ])", "", colnames(df))
df <- filter(df, !is.na(OTU_number_richness), sample_group != "all bulk soils", sample_group != "all rhizospheric soils")
df_bact <- df[1:16,]
View(d_bact)
View(df_bact)
df_fungi <- df[17:32,]
View(df_fungi)
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(ggplot2)
pairwise.wilcox.test(df_bact$OTU_number_richness ~ df_bact$sample_group, p.adjust.method = "BH")
pairwise.wilcox.test(df_bact$OTU_number_richness,df_bact$sample_group, p.adjust.method = "BH")
pairwise.wilcox.test(df_bact$OTU_number_richness p.adjust.method = "BH")
pairwise.wilcox.test(df_bact$OTU_number_richness, p.adjust.method = "BH")
pairwise.wilcox.test(df_bact$OTU_number_richness, p.adjust.method = "BH", g = df_bact$sample_group)
pairwise.wilcox.test(df_bact$OTU_number_richness, g = df_bact$sample_group)
kruskal.test(df_bact$OTU_number_richness)
kruskal.test(df_bact$OTU_number_richness, g = df_bact$sample_group)
kruskal.test(df_bact$`Shannon_'s_index_diversity`, g = df_bact$sample_group)
kruskal.test(df_bact$OTU_number_richness, g = df_bact$sample_group)
kruskal.test(df_bact$`Simpson_'s_index_diversity`, g = df_bact$sample_group)
kruskal.test(list(df_bact$OTU_number_richness))
pairwise.wilcox.test(df_bact$OTU_number_richness, p.adjust.method = "BH",  g = df_bact$sample_group)
df <- read_csv(file = "bi_otu_16S.csv")
?separate
df_bact <- separate(data = df_bact, col = "Samples", into = c("Type_soil","Sample", "Replicate"), sep "_", remove = FALSE)
df_bact <- read_csv(file = "bi_otu_16S.csv")
df_bact <- separate(data = df_bact, col = "Samples", into = c("Type_soil","Sample", "Replicate"), sep "_", remove = FALSE)
df_bact <- separate(data = df_bact, col = df_bact$Samples, into = c("Type_soil","Sample", "Replicate"), sep "_", remove = FALSE)
df_bact <- separate(data = df_bact, col = df_bact$Samples, into = c("Type_soil","Sample", "Replicate"), sep = "_", remove = FALSE)
df_bact <- separate(data = df_bact, col = "Samples", into = c("Type_soil","Sample", "Replicate"), sep = "_", remove = FALSE)
df_bact <- read_csv(file = "bi_otu_16S.csv")
df_bact <- separate(data = df_bact, col = "Samples", into = c("Type_soil","Sample_nb", "Replicate"), sep = "_", remove = FALSE)
df_bact <- separate(data = df_bact, col = "Samples", into = c("Type_soil","Sample_nb", "Replicate"), sep = "_", remove = FALSE)
wilcox.test(df_bact$OTU_number_richness ~ df_bact$Sample_nb)
wilcox.test()
?wilcox.test
wilcox.test(as.vector(df_bact$OTU_number_richness) ~ as.factor(df_bact$Sample_nb))
class(df_bact$OTU_number_richness)
df_bact <- read_csv(file = "bi_otu_16S.csv")
df_bact <- separate(data = df_bact, col = "Samples", into = c("Type_soil","Sample_nb", "Replicate"), sep = "_", remove = FALSE)
wilcox.test(df_bact$SHANNON ~ df_bact$Sample_nb)
wilcox_test(df_bact$SHANNON ~ df_bact$Sample_nb)
install.packages("rstatix")
?rstatix::wilcox_test
wilcox_test(df_bact,SHANNON ~ Sample_nb)
rstatix::wilcox_test(df_bact,SHANNON ~ Sample_nb)
test_bact <- rstatix::wilcox_test(df_bact,SHANNON ~ Sample_nb)
(test_bact %>% filter( p <=0.05))
test_bact <- rstatix::wilcox_test(df_bact,SHANNON ~ Sample_nb)
View(test_bact)
test_bact <- rstatix::wilcox_test(df_bact,SHANNON ~ Sample_nb) %>%
add_significance()
(test_bact %>% filter( p <=0.05))
test_bact <- rstatix::wilcox_test(df_bact,SHANNON ~ Sample_nb) %>%
add_significance()
test_bact <- rstatix::wilcox_test(df_bact,SHANNON ~ Sample_nb) %>%
rstatix::add_significance()
(test_bact %>% filter( p <=0.05))
test_bact <- rstatix::wilcox_test(df_bact,SHANNON ~ Sample_nb) %>%
rstatix::add_significance()
(test_bact %>% filter( p.adj <=0.05))
(test_bact %>% filter( p.adj <=0.05))
(test_bact_simp %>% filter( p.adj <=0.05))
test_bact_simp <- rstatix::wilcox_test(df_bact,SIMPSON ~ Sample_nb) %>%
rstatix::add_significance()
(test_bact_simp %>% filter( p.adj <=0.05))
?wilcox_test
test_bact_shann <- rstatix::wilcox_test(df_bact,SHANNON ~ Sample_nb, p.adjust.method = "BH") %>%
rstatix::add_significance()
(test_bact_shann %>% filter( p.adj <=0.05))
test_bact_simp <- rstatix::wilcox_test(df_bact,SIMPSON ~ Sample_nb, p.adjust.method = "BH") %>%
rstatix::add_significance()
(test_bact_simp %>% filter( p.adj <=0.05))
test_bact_chao <- rstatix::wilcox_test(df_bact,SIMPSON ~ Sample_nb, p.adjust.method = "BH") %>%
rstatix::add_significance()
(test_bact_chao %>% filter( p.adj <=0.05))
test_bact_chao <- rstatix::wilcox_test(df_bact, chao1 ~ Sample_nb, p.adjust.method = "BH") %>%
rstatix::add_significance()
(test_bact_chao %>% filter( p.adj <=0.05))
(test_bact_ace %>% filter( p.adj <=0.05))
test_bact_ace <- rstatix::wilcox_test(df_bact, ACE ~ Sample_nb, p.adjust.method = "BH") %>%
rstatix::add_significance()
(test_bact_ace %>% filter( p.adj <=0.05))
View(test_bact_ace)
df_bact <- read_csv(file = "bi_otu_16S.csv")
df_bact <- separate(data = df_bact, col = "Samples", into = c("Type_soil","Sample_nb", "Replicate"), sep = "_", remove = FALSE)
df_bact$Group <- paste(df$Type_soil, df$Sample_nb, sep="_")
df_bact$Group <- paste(df_bact$Type_soil, df_bact$Sample_nb, sep="_")
test_bact_shann <- rstatix::wilcox_test(df_bact,SHANNON ~ Group, p.adjust.method = "BH") %>%
rstatix::add_significance()
View(test_bact_shann)
test_bact_simp <- rstatix::wilcox_test(df_bact,SIMPSON ~ Group, p.adjust.method = "BH") %>%
rstatix::add_significance()
View(test_bact_simp)
test_bact_chao <- rstatix::wilcox_test(df_bact, chao1 ~ Group, p.adjust.method = "BH") %>%
rstatix::add_significance()
View(test_bact_chao)
test_bact_ace <- rstatix::wilcox_test(df_bact, ACE ~ Group, p.adjust.method = "BH") %>%
rstatix::add_significance()
(test_bact_ace %>% filter( p.adj <=0.05))
df_fungi <- df_bact <- read_csv(file = "bi_otu_ITS2.csv")
df_bact <- separate(data = df_bact, col = "Samples", into = c("Type_soil","Sample_nb", "Replicate"), sep = "_", remove = FALSE)
df_bact$Group <- paste(df_fungi$Type_soil, df_fungi$Sample_nb, sep="_")
df_fungi <- df_bact <- read_csv(file = "bi_otu_ITS2.csv")
df_fungi <- separate(data = df_fungi, col = "Samples", into = c("Type_soil","Sample_nb", "Replicate"), sep = "_", remove = FALSE)
df_fungi$Group <- paste(df_fungi$Type_soil, df_fungi$Sample_nb, sep="_")
test_fungi_shann <- rstatix::wilcox_test(df_fungi,SHANNON ~ Group, p.adjust.method = "BH") %>%
rstatix::add_significance()
View(test_fungi_shann)
test_fungi_simp <- rstatix::wilcox_test(df_fungi,SIMPSON ~ Group, p.adjust.method = "BH") %>%
rstatix::add_significance()
test_fungi_simp <- rstatix::wilcox_test(df_fungi,SIMPSON ~ Group, p.adjust.method = "BH") %>%
rstatix::add_significance()
(test_bact_simp %>% filter( p.adj <=0.05))
test_fungi_chao <- rstatix::wilcox_test(df_fungi, chao1 ~ Group, p.adjust.method = "BH") %>%
rstatix::add_significance()
(test_bact_chao %>% filter( p.adj <=0.05))
test_fungi_ace <- rstatix::wilcox_test(df_fungi, ACE ~ Group, p.adjust.method = "BH") %>%
rstatix::add_significance()
(test_fungi_ace %>% filter( p.adj <=0.05))
(test_fungi_chao %>% filter( p.adj <=0.05))
## Bacterie
test_bact_shann2 <- rstatix::wilcox_test(df_bact,SHANNON ~ Type_soil, p.adjust.method = "BH") %>%
rstatix::add_significance()
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(ggplot2)
df_bact <- read_csv(file = "bi_otu_16S.csv")
df_bact <- separate(data = df_bact, col = "Samples", into = c("Type_soil","Sample_nb", "Replicate"), sep = "_", remove = FALSE)
df_bact$Group <- paste(df_bact$Type_soil, df_bact$Sample_nb, sep="_")
df_fungi <- df_bact <- read_csv(file = "bi_otu_ITS2.csv")
df_fungi <- separate(data = df_fungi, col = "Samples", into = c("Type_soil","Sample_nb", "Replicate"), sep = "_", remove = FALSE)
df_fungi$Group <- paste(df_fungi$Type_soil, df_fungi$Sample_nb, sep="_")
## Bacterie
test_bact_shann2 <- rstatix::wilcox_test(df_bact,SHANNON ~ Type_soil, p.adjust.method = "BH") %>%
rstatix::add_significance()
df_bact
View(df_bact)
df_bact <- read_csv(file = "bi_otu_16S.csv")
df_bact <- separate(data = df_bact, col = "Samples", into = c("Type_soil","Sample_nb", "Replicate"), sep = "_", remove = FALSE)
df_bact$Group <- paste(df_bact$Type_soil, df_bact$Sample_nb, sep="_")
test_bact_shann2 <- rstatix::wilcox_test(df_bact, SHANNON ~ Type_soil, p.adjust.method = "BH") %>%
rstatix::add_significance()
(test_bact_shann2 %>% filter( p.adj <=0.05))
View(test_bact_shann2)
(test_bact_simp2 <- rstatix::wilcox_test(df_bact,SIMPSON ~ Group, p.adjust.method = "BH") %>%
rstatix::add_significance())
## Bacterie
(test_bact_shann2 <- rstatix::wilcox_test(df_bact, SHANNON ~ Type_soil, p.adjust.method = "BH") %>%
rstatix::add_significance())
(test_bact_simp2 <- rstatix::wilcox_test(df_bact,SIMPSON ~ Type_soil, p.adjust.method = "BH") %>%
rstatix::add_significance())
(test_bact_chao2 <- rstatix::wilcox_test(df_bact, chao1 ~ Type_soil, p.adjust.method = "BH") %>%
rstatix::add_significance())
(test_bact_ace2 <- rstatix::wilcox_test(df_bact, ACE ~ Type_soil, p.adjust.method = "BH") %>%
rstatix::add_significance())
## Bacteria
(test_bact_shann2 <- rstatix::wilcox_test(df_bact, SHANNON ~ Type_soil, p.adjust.method = "BH") %>% rstatix::add_significance())
(test_bact_simp2 <- rstatix::wilcox_test(df_bact,SIMPSON ~ Type_soil, p.adjust.method = "BH") %>%
rstatix::add_significance())
(test_bact_chao2 <- rstatix::wilcox_test(df_bact, chao1 ~ Type_soil, p.adjust.method = "BH") %>%
rstatix::add_significance())
(test_bact_ace2 <- rstatix::wilcox_test(df_bact, ACE ~ Type_soil, p.adjust.method = "BH") %>%
rstatix::add_significance())
## FUNGI
(test_fungi_shann2 <- rstatix::wilcox_test(df_fungi, SHANNON ~ Type_soil, p.adjust.method = "BH") %>% rstatix::add_significance())
(test_fungi_simp2 <- rstatix::wilcox_test(df_fungi,SIMPSON ~ Type_soil, p.adjust.method = "BH") %>%
rstatix::add_significance())
(test_fungi_chao2 <- rstatix::wilcox_test(df_fungi, chao1 ~ Type_soil, p.adjust.method = "BH") %>%
rstatix::add_significance())
(test_fungi_ace2 <- rstatix::wilcox_test(df_fungi, ACE ~ Type_soil, p.adjust.method = "BH") %>%
rstatix::add_significance())
