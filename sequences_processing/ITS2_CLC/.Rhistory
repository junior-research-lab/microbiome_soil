ad0_bact_wheat <- as.vector(NULL)
for (s in 2:nrow(otu_bact_wheat)) {
ad_bact_wheat <- apply(otu_bact_wheat, MARGIN = 2, function (x) cor(x = x, y = env_data_wheat$ECe_new_value, method = "spearman" ))
ad0_bact_wheat <- cbind(ad0_bact_wheat, ad_bact_wheat)
}
dim(ad0_bact_wheat)
View(ad0_bact_wheat)
ad_bact_wheat <- apply(otu_bact_wheat[s,], MARGIN = 2, function (x) cor(x = x, y = env_data_wheat$ECe_new_value, method = "spearman" ))
#The first steps aim at doing a table with the p-value of the spearman's correlation between salinity and each of the bacteria OTU
## Remove the otu where there is no read
no_zero <- colSums(otu_bact_wheat)
otu_bact_wheat <- otu_bact_wheat[-c(which(no_zero == 0, arr.ind = TRUE))]
## Calculate the spearman correlation
ad0_bact_wheat <- as.vector(NULL)
for (s in 2:nrow(otu_bact_wheat)) {
ad_bact_wheat <- apply(otu_bact_wheat[s,], MARGIN = 2, function (x) cor(x = x, y = env_data_wheat$ECe_new_value, method = "spearman" ))
ad0_bact_wheat <- cbind(ad0_bact_wheat, ad_bact_wheat)
}
ad_bact_wheat <- apply(otu_bact_wheat[,s], MARGIN = 1, function (x) cor(x = x, y = env_data_wheat$ECe_new_value, method = "spearman" ))
#The first steps aim at doing a table with the p-value of the spearman's correlation between salinity and each of the bacteria OTU
## Remove the otu where there is no read
no_zero <- colSums(otu_bact_wheat)
otu_bact_wheat <- otu_bact_wheat[-c(which(no_zero == 0, arr.ind = TRUE))]
## Calculate the spearman correlation
ad0_bact_wheat <- as.vector(NULL)
for (s in 2:ncol(otu_bact_wheat)) {
ad_bact_wheat <- apply(otu_bact_wheat[,s], MARGIN = 1, function (x) cor(x = x, y = env_data_wheat$ECe_new_value, method = "spearman" ))
ad0_bact_wheat <- cbind(ad0_bact_wheat, ad_bact_wheat)
}
#The first steps aim at doing a table with the p-value of the spearman's correlation between salinity and each of the bacteria OTU
## Remove the otu where there is no read
no_zero <- colSums(otu_bact_wheat)
otu_bact_wheat <- otu_bact_wheat[-c(which(no_zero == 0, arr.ind = TRUE))]
## Calculate the spearman correlation
ad0_bact_wheat <- as.vector(NULL)
for (s in 2:ncol(otu_bact_wheat)) {
ad_bact_wheat <- cor(x = otu_bact_wheat[,s], y = env_data_wheat$ECe_new_value, method = "spearman" )
ad0_bact_wheat <- cbind(ad0_bact_wheat, ad_bact_wheat)
}
#The first steps aim at doing a table with the p-value of the spearman's correlation between salinity and each of the bacteria OTU
## Remove the otu where there is no read
no_zero <- colSums(otu_bact_wheat)
otu_bact_wheat <- otu_bact_wheat[-c(which(no_zero == 0, arr.ind = TRUE))]
## Calculate the spearman correlation
ad0_bact_wheat <- as.vector(NULL)
for (s in 2:ncol(otu_bact_wheat)) {
ad_bact_wheat <- cor(x = otu_bact_wheat[,s], y = env_data_wheat$ECe_new_value, method = "spearman" )
ad0_bact_wheat <- cbind(ad0_bact_wheat, ad_bact_wheat)
}
#The first steps aim at doing a table with the p-value of the spearman's correlation between salinity and each of the bacteria OTU
## Remove the otu where there is no read
no_zero <- colSums(otu_bact_wheat)
otu_bact_wheat <- otu_bact_wheat[-c(which(no_zero == 0, arr.ind = TRUE))]
## Calculate the spearman correlation
ad0_bact_wheat <- as.vector(NULL)
for (s in 2:ncol(otu_bact_wheat)) {
ad_bact_wheat <- cor(x = otu_bact_wheat[s,], y = env_data_wheat$ECe_new_value, method = "spearman" )
ad0_bact_wheat <- cbind(ad0_bact_wheat, ad_bact_wheat)
}
#The first steps aim at doing a table with the p-value of the spearman's correlation between salinity and each of the bacteria OTU
## Remove the otu where there is no read
no_zero <- colSums(otu_bact_wheat)
otu_bact_wheat <- otu_bact_wheat[-c(which(no_zero == 0, arr.ind = TRUE))]
## Calculate the spearman correlation
ad0_bact_wheat <- as.vector(NULL)
for (s in 2:ncol(otu_bact_wheat)) {
ad_bact_wheat <- cor(x = otu_bact_wheat[,s], y = env_data_wheat$ECe_new_value, method = "spearman" )
ad0_bact_wheat <- cbind(ad0_bact_wheat, ad_bact_wheat)
}
cor(x = otu_bact_wheat[,3], y = env_data_wheat$ECe_new_value, method = "spearman"
cor(x = otu_bact_wheat[,3], y = env_data_wheat$ECe_new_value, method = "spearman")
otu_bact_wheat[,3]
# Make 2 Env data tables, one for wheat, and other for noWheat. (see section below R command
env_data <- read.xlsx("sample_table_with_new_ECe_values.xlsx")
env_data <- separate(env_data, sample_id, c("wheat_presence", "site", "replicate"), sep ="_", remove = FALSE )
env_data <- mutate(env_data, wheat_presence = ifelse(wheat_presence == "B", 0, 1))
env_data <- select(env_data, sample_id, site, replicate, ECe_new_value, wheat_presence)
#Split the environnment table in two parts, one with wheat and one without wheat
env_data_wheat <- filter(env_data, wheat_presence == 1)
env_data_no_wheat <- filter(env_data, wheat_presence == 0)
#Delete the samples in env_data_no_wheat that have been deleted in the rarefied table. For fungi : B_3_1, B_9_3, B_7_3, B_5_1 and B_2_3. For bacteria : B_3_1 and B_5_2
env_data_no_wheat_f <- filter(env_data_no_wheat, sample_id != "B_2_3", sample_id != "B_5_1", sample_id != "B_3_1", sample_id != "B_7_3", sample_id != "B_9_3")
env_data_no_wheat_b <- filter(env_data_no_wheat, sample_id != "B_3_1", sample_id != "B_5_2")
#Import the rarefied table for ITS2
otu_fungi <- read.xlsx("ITS2_rarefied_table.xlsx")
otu_fungi <- mutate(otu_fungi, Taxonomy = paste(otu_fungi$Kingdom, otu_fungi$Phylum, otu_fungi$Class, otu_fungi$Order, otu_fungi$Family, otu_fungi$Gender, otu_fungi$Species, sep =";")) %>%
select(-Kingdom, -Phylum, -Class, -Order, -Family, -Gender, -Species)
otu_fungi <- otu_fungi %>% select(Taxonomy, everything())
#Transpose the table
t_otu_fungi <- data.frame(t(otu_fungi[-1]))
colnames(t_otu_fungi) <- otu_fungi$Taxonomy
#Split the otu table in two, given the presence or absence of wheat
otu_fungi_wheat <- t_otu_fungi[-c(grep("B.", rownames(t_otu_fungi))),]
otu_fungi_no_wheat <- t_otu_fungi[-c(grep("R.", rownames(t_otu_fungi))),]
#Import the rarefied table for ITS2
otu_bact <- read.xlsx("16S_rarefied_table.xlsx")
otu_bact <- mutate(otu_bact, Taxonomy = paste(otu_bact$Domain, otu_bact$Phylum, otu_bact$Class, otu_bact$Order, otu_bact$Family, otu_bact$Gender, otu_bact$Species, sep =";")) %>%
select(-Domain, -Phylum, -Class, -Order, -Family, -Gender, -Species)
otu_bact <- otu_bact %>% select(Taxonomy, everything())
#Transpose the table
t_otu_bact <- data.frame(t(otu_bact[-1]))
colnames(t_otu_bact) <- otu_bact$Taxonomy
#Split the otu table in two, given the presence or absence of wheat
otu_bact_wheat <- t_otu_bact[-c(grep("B.", rownames(t_otu_bact))),]
otu_bact_no_wheat <- t_otu_bact[-c(grep("R.", rownames(t_otu_bact))),]
#The first steps aim at doing a table with the p-value of the spearman's correlation between salinity and each of the bacteria OTU
## Remove the otu where there is no read
no_zero <- colSums(otu_bact_wheat)
otu_bact_wheat <- otu_bact_wheat[-c(which(no_zero == 0, arr.ind = TRUE))]
## Calculate the spearman correlation
ad0_bact_wheat <- as.vector(NULL)
for (s in 2:ncol(otu_bact_wheat)) {
ad_bact_wheat <- cor(x = otu_bact_wheat[,s], y = env_data_wheat$ECe_new_value, method = "spearman" )
ad0_bact_wheat <- cbind(ad0_bact_wheat, ad_bact_wheat)
}
ad0_bact_wheat
View(ad0_bact_wheat)
# Make 2 Env data tables, one for wheat, and other for noWheat. (see section below R command
env_data <- read.xlsx("sample_table_with_new_ECe_values.xlsx")
env_data <- separate(env_data, sample_id, c("wheat_presence", "site", "replicate"), sep ="_", remove = FALSE )
env_data <- mutate(env_data, wheat_presence = ifelse(wheat_presence == "B", 0, 1))
env_data <- select(env_data, sample_id, site, replicate, ECe_new_value, wheat_presence)
#Split the environnment table in two parts, one with wheat and one without wheat
env_data_wheat <- filter(env_data, wheat_presence == 1)
env_data_no_wheat <- filter(env_data, wheat_presence == 0)
#Delete the samples in env_data_no_wheat that have been deleted in the rarefied table. For fungi : B_3_1, B_9_3, B_7_3, B_5_1 and B_2_3. For bacteria : B_3_1 and B_5_2
env_data_no_wheat_f <- filter(env_data_no_wheat, sample_id != "B_2_3", sample_id != "B_5_1", sample_id != "B_3_1", sample_id != "B_7_3", sample_id != "B_9_3")
env_data_no_wheat_b <- filter(env_data_no_wheat, sample_id != "B_3_1", sample_id != "B_5_2")
#Import the rarefied table for ITS2
otu_fungi <- read.xlsx("ITS2_rarefied_table.xlsx")
otu_fungi <- mutate(otu_fungi, Taxonomy = paste(otu_fungi$Kingdom, otu_fungi$Phylum, otu_fungi$Class, otu_fungi$Order, otu_fungi$Family, otu_fungi$Gender, otu_fungi$Species, sep =";")) %>%
select(-Kingdom, -Phylum, -Class, -Order, -Family, -Gender, -Species)
otu_fungi <- otu_fungi %>% select(Taxonomy, everything())
#Transpose the table
t_otu_fungi <- data.frame(t(otu_fungi[-1]))
colnames(t_otu_fungi) <- otu_fungi$Taxonomy
#Split the otu table in two, given the presence or absence of wheat
otu_fungi_wheat <- t_otu_fungi[-c(grep("B.", rownames(t_otu_fungi))),]
otu_fungi_no_wheat <- t_otu_fungi[-c(grep("R.", rownames(t_otu_fungi))),]
#Import the rarefied table for ITS2
otu_bact <- read.xlsx("16S_rarefied_table.xlsx")
otu_bact <- mutate(otu_bact, Taxonomy = paste(otu_bact$Domain, otu_bact$Phylum, otu_bact$Class, otu_bact$Order, otu_bact$Family, otu_bact$Gender, otu_bact$Species, sep =";")) %>%
select(-Domain, -Phylum, -Class, -Order, -Family, -Gender, -Species)
otu_bact <- otu_bact %>% select(Taxonomy, everything())
#Transpose the table
t_otu_bact <- data.frame(t(otu_bact[-1]))
colnames(t_otu_bact) <- otu_bact$Taxonomy
#Split the otu table in two, given the presence or absence of wheat
otu_bact_wheat <- t_otu_bact[-c(grep("B.", rownames(t_otu_bact))),]
otu_bact_no_wheat <- t_otu_bact[-c(grep("R.", rownames(t_otu_bact))),]
colnames(ad0_bact_wheat) <- names(otu_bact_wheat)[1:ncol(otu_bact_wheat)]
#The first steps aim at doing a table with the p-value of the spearman's correlation between salinity and each of the bacteria OTU
## Remove the otu where there is no read
no_zero <- colSums(otu_bact_wheat)
otu_bact_wheat <- otu_bact_wheat[-c(which(no_zero == 0, arr.ind = TRUE))]
## Calculate the spearman correlation
ad0_bact_wheat <- as.vector(NULL)
for (s in 1:ncol(otu_bact_wheat)) {
ad_bact_wheat <- cor(x = otu_bact_wheat[,s], y = env_data_wheat$ECe_new_value, method = "spearman" )
ad0_bact_wheat <- cbind(ad0_bact_wheat, ad_bact_wheat)
}
colnames(ad0_bact_wheat) <- names(otu_bact_wheat)[1:ncol(otu_bact_wheat)]
# The second step is to correct the p-values obtained given that the otu can be correlated.
FRD(data = ad0_bact_wheat)
# The second step is to correct the p-values obtained given that the otu can be correlated.
FDR(data = ad0_bact_wheat)
??FDR
??FDR
install.packages("fdrtools")
# The second step is to correct the p-values obtained given that the otu can be correlated.
astsa::FDR(data = ad0_bact_wheat)
install.packages("astsa")
# The second step is to correct the p-values obtained given that the otu can be correlated.
astsa::FDR(data = ad0_bact_wheat)
?p.adjust
# The second step is to correct the p-values obtained given that the otu can be correlated.
p.adjust(ad0_bact_wheat, method = "fdr")
# The second step is to correct the p-values obtained given that the otu can be correlated.
adjusted <- p.adjust(ad0_bact_wheat, method = "fdr")
View(adjusted)
install.packages("fdrtool")
?fdrtool
# The second step is to correct the p-values obtained given that the otu can be correlated.
adjusted <- fdrtool::fdrtool(ad0_bact_wheat, "correlation")
class(fdrtool)
class(ad0_bact_wheat)
#The first steps aim at doing a table with the p-value of the spearman's correlation between salinity and each of the bacteria OTU
## Remove the otu where there is no read
no_zero <- colSums(otu_bact_wheat)
otu_bact_wheat <- otu_bact_wheat[-c(which(no_zero == 0, arr.ind = TRUE))]
## Calculate the spearman correlation
ad0_bact_wheat <- as.vector(NULL)
for (s in 1:ncol(otu_bact_wheat)) {
ad_bact_wheat <- cor(x = otu_bact_wheat[,s], y = env_data_wheat$ECe_new_value, method = "spearman" )
ad0_bact_wheat <- cbind(ad0_bact_wheat, ad_bact_wheat)
}
# Make 2 Env data tables, one for wheat, and other for noWheat. (see section below R command
env_data <- read.xlsx("sample_table_with_new_ECe_values.xlsx")
env_data <- separate(env_data, sample_id, c("wheat_presence", "site", "replicate"), sep ="_", remove = FALSE )
env_data <- mutate(env_data, wheat_presence = ifelse(wheat_presence == "B", 0, 1))
env_data <- select(env_data, sample_id, site, replicate, ECe_new_value, wheat_presence)
#Split the environnment table in two parts, one with wheat and one without wheat
env_data_wheat <- filter(env_data, wheat_presence == 1)
env_data_no_wheat <- filter(env_data, wheat_presence == 0)
#Delete the samples in env_data_no_wheat that have been deleted in the rarefied table. For fungi : B_3_1, B_9_3, B_7_3, B_5_1 and B_2_3. For bacteria : B_3_1 and B_5_2
env_data_no_wheat_f <- filter(env_data_no_wheat, sample_id != "B_2_3", sample_id != "B_5_1", sample_id != "B_3_1", sample_id != "B_7_3", sample_id != "B_9_3")
env_data_no_wheat_b <- filter(env_data_no_wheat, sample_id != "B_3_1", sample_id != "B_5_2")
#Import the rarefied table for ITS2
otu_fungi <- read.xlsx("ITS2_rarefied_table.xlsx")
otu_fungi <- mutate(otu_fungi, Taxonomy = paste(otu_fungi$Kingdom, otu_fungi$Phylum, otu_fungi$Class, otu_fungi$Order, otu_fungi$Family, otu_fungi$Gender, otu_fungi$Species, sep =";")) %>%
select(-Kingdom, -Phylum, -Class, -Order, -Family, -Gender, -Species)
otu_fungi <- otu_fungi %>% select(Taxonomy, everything())
#Transpose the table
t_otu_fungi <- data.frame(t(otu_fungi[-1]))
colnames(t_otu_fungi) <- otu_fungi$Taxonomy
#Split the otu table in two, given the presence or absence of wheat
otu_fungi_wheat <- t_otu_fungi[-c(grep("B.", rownames(t_otu_fungi))),]
otu_fungi_no_wheat <- t_otu_fungi[-c(grep("R.", rownames(t_otu_fungi))),]
#Import the rarefied table for ITS2
otu_bact <- read.xlsx("16S_rarefied_table.xlsx")
otu_bact <- mutate(otu_bact, Taxonomy = paste(otu_bact$Domain, otu_bact$Phylum, otu_bact$Class, otu_bact$Order, otu_bact$Family, otu_bact$Gender, otu_bact$Species, sep =";")) %>%
select(-Domain, -Phylum, -Class, -Order, -Family, -Gender, -Species)
otu_bact <- otu_bact %>% select(Taxonomy, everything())
#Transpose the table
t_otu_bact <- data.frame(t(otu_bact[-1]))
colnames(t_otu_bact) <- otu_bact$Taxonomy
#Split the otu table in two, given the presence or absence of wheat
otu_bact_wheat <- t_otu_bact[-c(grep("B.", rownames(t_otu_bact))),]
otu_bact_no_wheat <- t_otu_bact[-c(grep("R.", rownames(t_otu_bact))),]
no_zero <- colSums(otu_bact_wheat)
otu_bact_wheat <- otu_bact_wheat[-c(which(no_zero == 0, arr.ind = TRUE))]
## Calculate the spearman correlation
ad0_bact_wheat <- as.vector(NULL)
for (s in 1:ncol(otu_bact_wheat)) {
ad_bact_wheat <- cor(x = otu_bact_wheat[,s], y = env_data_wheat$ECe_new_value, method = "spearman" )
ad0_bact_wheat <- cbind(ad0_bact_wheat, ad_bact_wheat)
}
class(ad0_bact_wheat)
v <- as.vector(ad0_bact_wheat)
V
v
# The second step is to correct the p-values obtained given that the otu can be correlated.
ad0_bact_wheat_v <- as.vector(ad0_bact_wheat)
adjusted <- fdrtool::fdrtool(ad0_bact_wheat, "correlation")
adjusted <- fdrtool::fdrtool(ad0_bact_wheat_v, "correlation")
View(adjusted)
p_val_wheat <- adjusted_wheat["pval"]
ad0_bact_wheat_v <- as.vector(ad0_bact_wheat)
adjusted_wheat <- fdrtool::fdrtool(ad0_bact_wheat_v, "correlation")
p_val_wheat <- adjusted_wheat["pval"]
View(p_val_wheat)
str(p_val_wheat)
p_val_wheat
?fdrtool::fdrtool
View(adjusted["lfdr"])
adjusted["lfdr"][["lfdr"]]
p_val_wheat <- as.matrix(p_val_wheat)
colnames(p_val_wheat) <- names(otu_bact_wheat)[1:ncol(otu_bact_wheat)]
View(p_val_wheat)
class(p_val_wheat)
p_val_wheat <- as.matrix(p_val_wheat[[1]])
colnames(p_val_wheat) <- names(otu_bact_wheat)[1:ncol(otu_bact_wheat)]
dim(p_value_wheat)
dim(p_val_wheat)
View(p_val_wheat)
p_val_wheat <- as.matrix(t(p_val_wheat[[1]]))
colnames(p_val_wheat) <- names(otu_bact_wheat)[1:ncol(otu_bact_wheat)]
names(otu_bact_wheat)[1:ncol(otu_bact_wheat)]
dim( names(otu_bact_wheat)[1:ncol(otu_bact_wheat)])
names(otu_bact_wheat)
names(otu_bact_wheat[1:ncol(otu_bact_wheat)])
p_val_wheat <- as.matrix(p_val_wheat[[1]])
colnames(p_val_wheat) <- names(otu_bact_wheat[1:ncol(otu_bact_wheat)])
#The first steps aim at doing a table with the p-value of the spearman's correlation between salinity and each of the bacteria OTU
## Remove the otu where there is no read
no_zero <- colSums(otu_bact_wheat)
otu_bact_wheat <- otu_bact_wheat[-c(which(no_zero == 0, arr.ind = TRUE))]
## Calculate the spearman correlation
ad0_bact_wheat <- as.vector(NULL)
for (s in 1:ncol(otu_bact_wheat)) {
ad_bact_wheat <- cor(x = otu_bact_wheat[,s], y = env_data_wheat$ECe_new_value, method = "spearman" )
ad0_bact_wheat <- cbind(ad0_bact_wheat, ad_bact_wheat)
}
#Import the rarefied table for ITS2
otu_bact <- read.xlsx("16S_rarefied_table.xlsx")
otu_bact <- mutate(otu_bact, Taxonomy = paste(otu_bact$Domain, otu_bact$Phylum, otu_bact$Class, otu_bact$Order, otu_bact$Family, otu_bact$Gender, otu_bact$Species, sep =";")) %>%
select(-Domain, -Phylum, -Class, -Order, -Family, -Gender, -Species)
otu_bact <- otu_bact %>% select(Taxonomy, everything())
#Transpose the table
t_otu_bact <- data.frame(t(otu_bact[-1]))
colnames(t_otu_bact) <- otu_bact$Taxonomy
#Split the otu table in two, given the presence or absence of wheat
otu_bact_wheat <- t_otu_bact[-c(grep("B.", rownames(t_otu_bact))),]
otu_bact_no_wheat <- t_otu_bact[-c(grep("R.", rownames(t_otu_bact))),]
#The first steps aim at doing a table with the p-value of the spearman's correlation between salinity and each of the bacteria OTU
## Remove the otu where there is no read
no_zero <- colSums(otu_bact_wheat)
otu_bact_wheat <- otu_bact_wheat[-c(which(no_zero == 0, arr.ind = TRUE))]
## Calculate the spearman correlation
ad0_bact_wheat <- as.vector(NULL)
for (s in 1:ncol(otu_bact_wheat)) {
ad_bact_wheat <- cor(x = otu_bact_wheat[,s], y = env_data_wheat$ECe_new_value, method = "spearman" )
ad0_bact_wheat <- cbind(ad0_bact_wheat, ad_bact_wheat)
}
# The second step is to correct the p-values obtained given that the otu can be correlated.
ad0_bact_wheat_v <- as.vector(ad0_bact_wheat)
adjusted_wheat <- fdrtool::fdrtool(ad0_bact_wheat_v, "correlation")
p_val_wheat <- adjusted_wheat["pval"]
p_val_wheat <- as.matrix(p_val_wheat[[1]])
colnames(p_val_wheat) <- names(otu_bact_wheat[1:ncol(otu_bact_wheat)])
dim(colnames(p_val_wheat))
View(colnames(p_val_wheat))
install.packages("hmisc")
install.packages("Hmisc")
#
Hmisc::rcorr(otu_bact_wheat, y = env_data_wheat$ECe_new_value, type = "spearman")
# Make 2 Env data tables, one for wheat, and other for noWheat. (see section below R command
env_data <- read.xlsx("sample_table_with_new_ECe_values.xlsx")
env_data <- separate(env_data, sample_id, c("wheat_presence", "site", "replicate"), sep ="_", remove = FALSE )
env_data <- mutate(env_data, wheat_presence = ifelse(wheat_presence == "B", 0, 1))
env_data <- select(env_data, sample_id, site, replicate, ECe_new_value, wheat_presence)
#Split the environnment table in two parts, one with wheat and one without wheat
env_data_wheat <- filter(env_data, wheat_presence == 1)
env_data_no_wheat <- filter(env_data, wheat_presence == 0)
#Delete the samples in env_data_no_wheat that have been deleted in the rarefied table. For fungi : B_3_1, B_9_3, B_7_3, B_5_1 and B_2_3. For bacteria : B_3_1 and B_5_2
env_data_no_wheat_f <- filter(env_data_no_wheat, sample_id != "B_2_3", sample_id != "B_5_1", sample_id != "B_3_1", sample_id != "B_7_3", sample_id != "B_9_3")
env_data_no_wheat_b <- filter(env_data_no_wheat, sample_id != "B_3_1", sample_id != "B_5_2")
#Import the rarefied table for ITS2
otu_fungi <- read.xlsx("ITS2_rarefied_table.xlsx")
otu_fungi <- mutate(otu_fungi, Taxonomy = paste(otu_fungi$Kingdom, otu_fungi$Phylum, otu_fungi$Class, otu_fungi$Order, otu_fungi$Family, otu_fungi$Gender, otu_fungi$Species, sep =";")) %>%
select(-Kingdom, -Phylum, -Class, -Order, -Family, -Gender, -Species)
otu_fungi <- otu_fungi %>% select(Taxonomy, everything())
#Transpose the table
t_otu_fungi <- data.frame(t(otu_fungi[-1]))
colnames(t_otu_fungi) <- otu_fungi$Taxonomy
#Split the otu table in two, given the presence or absence of wheat
otu_fungi_wheat <- t_otu_fungi[-c(grep("B.", rownames(t_otu_fungi))),]
otu_fungi_no_wheat <- t_otu_fungi[-c(grep("R.", rownames(t_otu_fungi))),]
#Import the rarefied table for ITS2
otu_bact <- read.xlsx("16S_rarefied_table.xlsx")
otu_bact <- mutate(otu_bact, Taxonomy = paste(otu_bact$Domain, otu_bact$Phylum, otu_bact$Class, otu_bact$Order, otu_bact$Family, otu_bact$Gender, otu_bact$Species, sep =";")) %>%
select(-Domain, -Phylum, -Class, -Order, -Family, -Gender, -Species)
otu_bact <- otu_bact %>% select(Taxonomy, everything())
#Transpose the table
t_otu_bact <- data.frame(t(otu_bact[-1]))
colnames(t_otu_bact) <- otu_bact$Taxonomy
#Split the otu table in two, given the presence or absence of wheat
otu_bact_wheat <- t_otu_bact[-c(grep("B.", rownames(t_otu_bact))),]
otu_bact_no_wheat <- t_otu_bact[-c(grep("R.", rownames(t_otu_bact))),]
setwd("~/D3/JRL/microbiome_soil/sequences_processing/ITS2_CLC")
install.packages(c("estimatr", "ggpubr"))
install.packages("iNEXT")
library(purrr)
library(openxlsx)
library(tidyverse)
library(vegan)
library(readr)
library(readxl)
library(plyr)
library(dplyr)
library(utils)
library(estimatr)
library(ggpubr)
library(iNEXT)
library(acepack)
library(ggplot2)
df_phylum <- read_excel("C:/Users/amapo/Documents/GitHub/microbiome_soil/sequences_processing/ITS2_CLC/ITS2_phylum_reads.xlsx")
df_phylum <- read_excel("ITS2_phylum_reads.xlsx")
df_order <- read_excel("ITS2_order_reads.xlsx")
df_family <- read_excel("ITS2_family_reads.xlsx")
df_gender <- read_excel("ITS2_gender_reads.xlsx")
S1_table <- read_excel("S1_table.xlsx")
S1_table <- read_excel("S1_table.xlsx")
View(S1_table)
# Change format to .csv
write.csv(S1_table, file = "S1_table.csv", row.names = TRUE)
#Delete the same samples as ITS2
S1_table_ITS2 <- S1_table[-c(3, 4, 10, 18, 24), ]
shannon_phylum_ITS2 <- ddply(df_phylum,~Samples,function(x) {
data.frame(SHANNON=diversity(x[-1], index = "shannon"))
})
write.csv(shannon_phylum_ITS2, file = "shannon_phylum_ITS2.csv", row.names = TRUE)
# Simpson for Phylum of ITS2
simpson_phylum_ITS2 <- ddply(df_phylum,~Samples,function(x) {
data.frame(SIMPSON=diversity(x[-1], index = "simpson"))
})
write.csv(simpson_phylum_ITS2, file = "simpson_phylum_ITS2.csv", row.names = TRUE)
# Chao1 for Phylum of ITS2
chao_phylum_ITS2 <- ddply(df_phylum,~Samples,function(x) {
data.frame(chao1=estimateR(x[-1], index = "chao1"))
})
View(chao_phylum_ITS2)
write.csv(chao_phylum_ITS2, file = "chao1_phylum_ITS2.csv", row.names = TRUE)
# Merge biodiversity indexes
bi_phylum_ITS2 <- merge(shannon_phylum_ITS2, simpson_phylum_ITS2, by = "Samples")
# Export the merged table in excel and .csv
write.xlsx(bi_phylum_ITS2,"bi_phylum_ITS2.xlsx")
write.csv(bi_phylum_ITS2, file = "bi_phylum_ITS2.csv", row.names = TRUE)
# Preparation of data for Spearman correlation
#Merge bi and S1 tables
data_phylum_ITS2 <- merge(bi_phylum_ITS2, S1_table_ITS2, by = "Samples")
# Spearman correlation for SHANNON
corr_phy_ITS2_shann <- cor.test(x=data_phylum_ITS2$`ECe _values`, y=data_phylum_ITS2$SHANNON, method = "spearman")
#Cannot compute exact p-value with ties
corr_phy_ITS2_shann
# Manually calculating
phy.ranked.shann <- data.frame(cbind(rank(data_phylum_ITS2$`ECe _values`, ties.method = "average"), rank(data_phylum_ITS2$SHANNON, ties.method = "average")))
colnames(phy.ranked.shann) <- c("ECe_values", "SHANNON")
View(phy.ranked.shann)
rho <- cov(phy.ranked.shann) / (sd(phy.ranked.shann$ECe_values) * sd(phy.ranked.shann$SHANNON))
rho[[2]]
corr_phy_ITS2_shann$estimate
corr_phy_ITS2_shann$statistic
corr_phy_ITS2_shann$p.value
ggplot(data = phy.ranked.shann) + geom_point(mapping = aes(x = ECe_values, y = SHANNON))
ggplot(data = phy.ranked.shann) + geom_point(mapping = aes(x = ECe_values, y = SHANNON), color = "black")
ggplot(data = phy.ranked.shann, mapping = aes(x = ECe_values, y = SHANNON)) + geom_point()
phy_ranked_shann <- data.frame(cbind(rank(data_phylum_ITS2$`ECe _values`, ties.method = "average"), rank(data_phylum_ITS2$SHANNON, ties.method = "average")))
colnames(phy_ranked_shann) <- c("ECe_values", "SHANNON")
View(phy_ranked_shann)
rho <- cov(phy_ranked_shann) / (sd(phy_ranked_shann$ECe_values) * sd(phy_ranked_shann$SHANNON))
rho[[2]]
corr_phy_ITS2_shann$estimate
corr_phy_ITS2_shann$statistic
corr_phy_ITS2_shann$p.value
ggplot(data = phy_ranked_shann, mapping = aes(x = ECe_values, y = SHANNON)) + geom_point()
source()
print(ggplot(data = phy_ranked_shann, mapping = aes(x = ECe_values, y = SHANNON)) + geom_point())
class(phy_ranked_shann)
ggscatter(phy_ranked_shann, x = "ECe_values", y = "SHANNON",
color = "black", shape = 21, size = 3,
add = "reg.line", add.params = list(color = "blue", fill = "lightgray"),
conf.int = TRUE,
cor.coef = TRUE,
cor.method = "spearman",
xlab = "ECe_value", ylab = "SHANNON") + geom_point()
library(ggplot2)
ggplot(data = phy_ranked_shann, mapping = aes(x = ECe_values, y = SHANNON)) + geom_point()
View(df_phylum)
ggplot(data = df_phylum) + geom_point(mapping = aes(x= Samples, y = Basidiomycota))
ggplot(data = df_phylum) + geom_histogram(mapping = aes(x= Samples, y = Basidiomycota))
ggplot(data = df_phylum) + geom_bar(mapping = aes(x= Samples, y = Basidiomycota))
ggplot(data = df_phylum) + geom_point(mapping = aes(x= Samples, y = Basidiomycota))
?geom_point
ggplot(data = df_phylum) + geom_point(mapping = aes(x= Mucoromycota, y = Basidiomycota))
(ggplot(data = df_phylum) + geom_point(mapping = aes(x= Mucoromycota, y = Basidiomycota)))
(ggplot2::ggplot(data = df_phylum) + ggplot2::geom_point(mapping = aes(x= Mucoromycota, y = Basidiomycota)))
uninstall.packages("ggpubr")
remove.packages("ggpubr")
(ggplot2::ggplot(data = df_phylum) + ggplot2::geom_point(mapping = aes(x= Mucoromycota, y = Basidiomycota)))
remove.packages("plyr")
remove.packages(utils)
remove.packages(iNEXT)
remove.packages(acepack)
remove.packages(estimatr)
remove.packages(purrr)
knitr::opts_chunk$set(echo = TRUE)
library(openxlsx)
library(tidyverse)
library(vegan)
library(readr)
library(readxl)
library(dplyr)
library(ggplot2)
(ggplot2::ggplot(data = df_phylum) + ggplot2::geom_point(mapping = aes(x= Mucoromycota, y = Basidiomycota)))
ggplot(data = phy_ranked_shann, mapping = aes(x = ECe_values, y = SHANNON)) + geom_point()
(ggplot2::ggplot(data = df_phylum) + ggplot2::geom_bar(mapping = aes(x= Samples, y = Basidiomycota)))
(ggplot2::ggplot(data = df_phylum) + ggplot2::geom_bar(mapping = aes(x= Samples)))
#
Hmisc::rcorr(otu_bact_wheat, y = env_data_wheat$ECe_new_value, type = "spearman")
?Hmisc::rcorr
#
Hmisc::rcorr(otu_bact_wheat,env_data_wheat$ECe_new_value, type = "spearman")
class(env_data_wheat$ECe_new_value)
#
Hmisc::rcorr(otu_bact_wheat,as.matrix(env_data_wheat$ECe_new_value), type = "spearman")
View(otu_bact_wheat)
#
Hmisc::rcorr(otu_bact_wheat,as.vector(env_data_wheat$ECe_new_value), type = "spearman")
str(otu_bact_wheat)
str(env_data_wheat$ECe_new_value)
env_data_wheat$ECe_new_value
as.double(env_data_wheat$ECe_new_value)== TRUE
as.double(otu_bact_wheat)== TRUE
#Other way to calculate the spearman correlation (should work better maybe for the q-values)
Hmisc::rcorr(as.matrix(otu_bact_wheat),env_data_wheat$ECe_new_value, type = "spearman")
#Other way to calculate the spearman correlation (should work better maybe for the q-values)
spearman <- Hmisc::rcorr(as.matrix(otu_bact_wheat),env_data_wheat$ECe_new_value, type = "spearman")
View(spearman)
spearman[["r"]]
# Make 2 Env data tables, one for wheat, and other for noWheat. (see section below R command
env_data <- read.xlsx("sample_table_with_new_ECe_values.xlsx")
env_data <- separate(env_data, sample_id, c("wheat_presence", "site", "replicate"), sep ="_", remove = FALSE )
env_data <- mutate(env_data, wheat_presence = ifelse(wheat_presence == "B", 0, 1))
env_data <- select(env_data, sample_id, site, replicate, ECe_new_value, wheat_presence)
#Split the environnment table in two parts, one with wheat and one without wheat
env_data_wheat <- filter(env_data, wheat_presence == 1)
env_data_no_wheat <- filter(env_data, wheat_presence == 0)
#Delete the samples in env_data_no_wheat that have been deleted in the rarefied table. For fungi : B_3_1, B_9_3, B_7_3, B_5_1 and B_2_3. For bacteria : B_3_1 and B_5_2
env_data_no_wheat_f <- filter(env_data_no_wheat, sample_id != "B_2_3", sample_id != "B_5_1", sample_id != "B_3_1", sample_id != "B_7_3", sample_id != "B_9_3")
env_data_no_wheat_b <- filter(env_data_no_wheat, sample_id != "B_3_1", sample_id != "B_5_2")
#Import the rarefied table for ITS2
otu_fungi <- read.xlsx("ITS2_rarefied_table.xlsx")
otu_fungi <- mutate(otu_fungi, Taxonomy = paste(otu_fungi$Kingdom, otu_fungi$Phylum, otu_fungi$Class, otu_fungi$Order, otu_fungi$Family, otu_fungi$Gender, otu_fungi$Species, sep =";")) %>%
select(-Kingdom, -Phylum, -Class, -Order, -Family, -Gender, -Species)
otu_fungi <- otu_fungi %>% select(Taxonomy, everything())
#Transpose the table
t_otu_fungi <- data.frame(t(otu_fungi[-1]))
colnames(t_otu_fungi) <- otu_fungi$Taxonomy
#Split the otu table in two, given the presence or absence of wheat
otu_fungi_wheat <- t_otu_fungi[-c(grep("B.", rownames(t_otu_fungi))),]
otu_fungi_no_wheat <- t_otu_fungi[-c(grep("R.", rownames(t_otu_fungi))),]
